{"version":3,"file":"liquid-long-ethers-impl.js","sourceRoot":"","sources":["../source/liquid-long-ethers-impl.ts"],"names":[],"mappings":";;AACA,wCAA0E;AAY1E,MAAa,4BAA4B;IAGxC,YAAmB,QAAkB,EAAE,MAAc;QAKrD,cAAS,GAAG,CAAC,UAAkB,EAAE,EAAE,CAAC,iBAAS,CAAC,mBAAW,CAAC,UAAU,CAAC,CAAC,CAAA;QACtE,iBAAY,GAAG,CAAC,WAAwB,EAAE,UAAsB,EAAE,EAAE,CAAC,IAAI,gBAAQ,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QACpI,iBAAY,GAAG,CAAC,aAAkC,EAAE,OAAe,EAAE,EAAE,CAAC,IAAI,gBAAQ,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,OAAO,CAAC,CAAA;QACrH,sBAAiB,GAAG,KAAK,IAAI,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;QACvE,SAAI,GAAG,KAAK,EAAE,WAAmC,EAAE,EAAE,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAC3F,sBAAiB,GAAG,KAAK,EAAE,WAAmC,EAAE,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAO,EAAE,CAAC,CAAA;QATvJ,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACrB,CAAC;CAQD;AAdD,oEAcC","sourcesContent":["import { Dependencies, AbiFunction, AbiParameter, Transaction } from './generated/liquid-long'\nimport { keccak256, toUtf8Bytes, BigNumber, AbiCoder } from 'ethers/utils'\nimport { TransactionResponse, TransactionRequest } from 'ethers/providers';\n\nexport interface Provider {\n\tlistAccounts(): Promise<Array<string>>\n\tcall(transaction: TransactionRequest): Promise<string>\n}\n\nexport interface Signer {\n\tsendTransaction(transaction: TransactionRequest): Promise<TransactionResponse>;\n}\n\nexport class LiquidLongDependenciesEthers implements Dependencies<BigNumber> {\n\tprivate readonly provider: Provider\n\tprivate readonly signer: Signer\n\tpublic constructor(provider: Provider, signer: Signer) {\n\t\tthis.provider = provider\n\t\tthis.signer = signer\n\t}\n\n\tkeccak256 = (utf8String: string) => keccak256(toUtf8Bytes(utf8String))\n\tencodeParams = (abiFunction: AbiFunction, parameters: Array<any>) => new AbiCoder().encode(abiFunction.inputs, parameters).substr(2)\n\tdecodeParams = (abiParameters: Array<AbiParameter>, encoded: string) => new AbiCoder().decode(abiParameters, encoded)\n\tgetDefaultAddress = async () => (await this.provider.listAccounts())[0]\n\tcall = async (transaction: Transaction<BigNumber>) => await this.provider.call(transaction)\n\tsubmitTransaction = async (transaction: Transaction<BigNumber>) => ({ status: (await (await this.signer.sendTransaction(transaction)).wait()).status! })\n}\n"]}