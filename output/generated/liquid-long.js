"use strict";
// THIS FILE IS AUTOMATICALLY GENERATED BY `generateContractInterfaces.ts`. DO NOT EDIT BY HAND'
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * By convention, pure/view methods have a `_` suffix on them indicating to the caller that the function will be executed locally and return the function's result.  payable/nonpayable functions have both a localy version and a remote version (distinguished by the trailing `_`).  If the remote method is called, you will only get back a transaction hash which can be used to lookup the transaction receipt for success/failure (due to EVM limitations you will not get the function results back).
 */
class Contract {
    constructor(dependencies, address) {
        this.dependencies = dependencies;
        this.address = address;
    }
    stringifyParams(params) {
        return params.map(param => {
            if (param.type === 'tuple') {
                if (!param.components)
                    throw new Error(`Expected components when type is ${param.type}`);
                return `(${this.stringifyParams(param.components).join(',')})`;
            }
            else if (param.type === 'tuple[]') {
                if (!param.components)
                    throw new Error(`Expected components when type is ${param.type}`);
                return `(${this.stringifyParams(param.components).join(',')})[]`;
            }
            else {
                return param.type;
            }
        });
    }
    hashSignature(abiFunction) {
        const parameters = this.stringifyParams(abiFunction.inputs).join(',');
        const signature = `${abiFunction.name}(${parameters})`;
        return this.dependencies.keccak256(signature).substring(0, 10);
    }
    encodeMethod(abi, parameters) {
        return `${this.hashSignature(abi)}${this.dependencies.encodeParams(abi, parameters)}`;
    }
    async localCall(abi, parameters, sender, attachedEth) {
        const from = sender || await this.dependencies.getDefaultAddress();
        const data = this.encodeMethod(abi, parameters);
        const transaction = Object.assign({ from: from, to: this.address, data: data }, attachedEth ? { value: attachedEth } : {});
        const result = await this.dependencies.call(transaction);
        if (result === '0x')
            throw new Error(`Call returned '0x' indicating failure.`);
        return this.dependencies.decodeParams(abi.outputs, result);
    }
    async remoteCall(abi, parameters, txName, sender, attachedEth) {
        const from = sender || await this.dependencies.getDefaultAddress();
        const data = this.encodeMethod(abi, parameters);
        const transaction = Object.assign({ from: from, to: this.address, data: data }, attachedEth ? { value: attachedEth } : {});
        const transactionReceipt = await this.dependencies.submitTransaction(transaction);
        if (transactionReceipt.status != 1) {
            throw new Error(`Tx ${txName} failed: ${transactionReceipt}`);
        }
    }
}
exports.Contract = Contract;
class CdpHolder extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.returnUnrecognizedCdp = async (cdpId, user, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }, { "name": "_user", "type": "address" }], "name": "returnUnrecognizedCdp", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cdpId, user], 'returnUnrecognizedCdp', options.sender);
            return;
        };
        this.returnUnrecognizedCdp_ = async (cdpId, user, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }, { "name": "_user", "type": "address" }], "name": "returnUnrecognizedCdp", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [cdpId, user], options.sender);
        };
        this.maker_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "maker", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.renounceOwnership = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'renounceOwnership', options.sender);
            return;
        };
        this.renounceOwnership_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.owner_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.recordCdpOwnership = async (cdpId, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }], "name": "recordCdpOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cdpId], 'recordCdpOwnership', options.sender);
            return;
        };
        this.recordCdpOwnership_ = async (cdpId, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }], "name": "recordCdpOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [cdpId], options.sender);
        };
        this.returnCdp = async (cdpId, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }], "name": "returnCdp", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cdpId], 'returnCdp', options.sender);
            return;
        };
        this.returnCdp_ = async (cdpId, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }], "name": "returnCdp", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [cdpId], options.sender);
        };
        this.cdpLastOwner_ = async (arg0, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "", "type": "bytes32" }], "name": "cdpLastOwner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [arg0], options.sender);
            return result[0];
        };
        this.transferOwnership = async (newOwner, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender);
            return;
        };
        this.transferOwnership_ = async (newOwner, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [newOwner], options.sender);
        };
    }
}
exports.CdpHolder = CdpHolder;
class Claimable extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.claimOwnership = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "claimOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'claimOwnership', options.sender);
            return;
        };
        this.claimOwnership_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "claimOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.renounceOwnership = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'renounceOwnership', options.sender);
            return;
        };
        this.renounceOwnership_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.owner_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.pendingOwner_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "pendingOwner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.transferOwnership = async (newOwner, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender);
            return;
        };
        this.transferOwnership_ = async (newOwner, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [newOwner], options.sender);
        };
    }
}
exports.Claimable = Claimable;
class Dai extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.approve = async (spender, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "spender", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [spender, value], 'approve', options.sender);
            return;
        };
        this.approve_ = async (spender, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "spender", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [spender, value], options.sender);
            return result[0];
        };
        this.totalSupply_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "totalSupply", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.transferFrom = async (from, to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender);
            return;
        };
        this.transferFrom_ = async (from, to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [from, to, value], options.sender);
            return result[0];
        };
        this.balanceOf_ = async (who, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "who", "type": "address" }], "name": "balanceOf", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [who], options.sender);
            return result[0];
        };
        this.transfer = async (to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [to, value], 'transfer', options.sender);
            return;
        };
        this.transfer_ = async (to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [to, value], options.sender);
            return result[0];
        };
        this.allowance_ = async (owner, spender, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "owner", "type": "address" }, { "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [owner, spender], options.sender);
            return result[0];
        };
    }
}
exports.Dai = Dai;
class ERC20 extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.approve = async (spender, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "spender", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [spender, value], 'approve', options.sender);
            return;
        };
        this.approve_ = async (spender, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "spender", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [spender, value], options.sender);
            return result[0];
        };
        this.totalSupply_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "totalSupply", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.transferFrom = async (from, to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender);
            return;
        };
        this.transferFrom_ = async (from, to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [from, to, value], options.sender);
            return result[0];
        };
        this.balanceOf_ = async (who, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "who", "type": "address" }], "name": "balanceOf", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [who], options.sender);
            return result[0];
        };
        this.transfer = async (to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [to, value], 'transfer', options.sender);
            return;
        };
        this.transfer_ = async (to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [to, value], options.sender);
            return result[0];
        };
        this.allowance_ = async (owner, spender, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "owner", "type": "address" }, { "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [owner, spender], options.sender);
            return result[0];
        };
    }
}
exports.ERC20 = ERC20;
class ERC20Basic extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.totalSupply_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "totalSupply", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.balanceOf_ = async (who, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "who", "type": "address" }], "name": "balanceOf", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [who], options.sender);
            return result[0];
        };
        this.transfer = async (to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [to, value], 'transfer', options.sender);
            return;
        };
        this.transfer_ = async (to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [to, value], options.sender);
            return result[0];
        };
    }
}
exports.ERC20Basic = ERC20Basic;
class LiquidLong extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.totalPayments_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "totalPayments", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.getCdps = async (user, offset, pageSize, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_user", "type": "address" }, { "name": "_offset", "type": "uint256" }, { "name": "_pageSize", "type": "uint256" }], "name": "getCdps", "outputs": [{ "components": [{ "name": "id", "type": "uint256" }, { "name": "debtInAttodai", "type": "uint256" }, { "name": "lockedAttoeth", "type": "uint256" }, { "name": "feeInAttoeth", "type": "uint256" }, { "name": "liquidationCostInAttoeth", "type": "uint256" }, { "name": "liquidatableDebtInAttodai", "type": "uint256" }, { "name": "liquidationCostAtFeedPriceInAttoeth", "type": "uint256" }, { "name": "userOwned", "type": "bool" }], "name": "_cdps", "type": "tuple[]" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [user, offset, pageSize], 'getCdps', options.sender);
            return;
        };
        this.getCdps_ = async (user, offset, pageSize, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_user", "type": "address" }, { "name": "_offset", "type": "uint256" }, { "name": "_pageSize", "type": "uint256" }], "name": "getCdps", "outputs": [{ "components": [{ "name": "id", "type": "uint256" }, { "name": "debtInAttodai", "type": "uint256" }, { "name": "lockedAttoeth", "type": "uint256" }, { "name": "feeInAttoeth", "type": "uint256" }, { "name": "liquidationCostInAttoeth", "type": "uint256" }, { "name": "liquidatableDebtInAttodai", "type": "uint256" }, { "name": "liquidationCostAtFeedPriceInAttoeth", "type": "uint256" }, { "name": "userOwned", "type": "bool" }], "name": "_cdps", "type": "tuple[]" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [user, offset, pageSize], options.sender);
            return result[0];
        };
        this.closeCdp = async (cdpId, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }], "name": "closeCdp", "outputs": [{ "name": "", "type": "uint256" }], "payable": true, "stateMutability": "payable", "type": "function" };
            await this.remoteCall(abi, [cdpId], 'closeCdp', options.sender, options.attachedEth);
            return;
        };
        this.closeCdp_ = async (cdpId, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }], "name": "closeCdp", "outputs": [{ "name": "", "type": "uint256" }], "payable": true, "stateMutability": "payable", "type": "function" };
            const result = await this.localCall(abi, [cdpId], options.sender, options.attachedEth);
            return result[0];
        };
        this.getPayPriceAndAmount_ = async (payGem, buyGem, payDesiredAmount, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "_payGem", "type": "address" }, { "name": "_buyGem", "type": "address" }, { "name": "_payDesiredAmount", "type": "uint256" }], "name": "getPayPriceAndAmount", "outputs": [{ "name": "_paidAmount", "type": "uint256" }, { "name": "_boughtAmount", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [payGem, buyGem, payDesiredAmount], options.sender);
            return result;
        };
        this.wethDeposit = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "wethDeposit", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" };
            await this.remoteCall(abi, [], 'wethDeposit', options.sender, options.attachedEth);
            return;
        };
        this.wethDeposit_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "wethDeposit", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" };
            await this.localCall(abi, [], options.sender, options.attachedEth);
        };
        this.unpause = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "unpause", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'unpause', options.sender);
            return;
        };
        this.unpause_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "unpause", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.estimateDaiPurchaseCosts_ = async (attodaiToBuy, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "_attodaiToBuy", "type": "uint256" }], "name": "estimateDaiPurchaseCosts", "outputs": [{ "name": "_wethPaid", "type": "uint256" }, { "name": "_daiBought", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [attodaiToBuy], options.sender);
            return result;
        };
        this.weth_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "weth", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.getVolumeAtPrice_ = async (payGem, buyGem, payAmount, buyAmount, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "_payGem", "type": "address" }, { "name": "_buyGem", "type": "address" }, { "name": "_payAmount", "type": "uint256" }, { "name": "_buyAmount", "type": "uint256" }], "name": "getVolumeAtPrice", "outputs": [{ "name": "_paidAmount", "type": "uint256" }, { "name": "_boughtAmount", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [payGem, buyGem, payAmount, buyAmount], options.sender);
            return result;
        };
        this.returnUnrecognizedCdp = async (cdpId, user, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }, { "name": "_user", "type": "address" }], "name": "returnUnrecognizedCdp", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cdpId, user], 'returnUnrecognizedCdp', options.sender);
            return;
        };
        this.returnUnrecognizedCdp_ = async (cdpId, user, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }, { "name": "_user", "type": "address" }], "name": "returnUnrecognizedCdp", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [cdpId, user], options.sender);
        };
        this.claimOwnership = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "claimOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'claimOwnership', options.sender);
            return;
        };
        this.claimOwnership_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "claimOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.maker_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "maker", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.estimateDaiSaleProceeds_ = async (attodaiToSell, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "_attodaiToSell", "type": "uint256" }], "name": "estimateDaiSaleProceeds", "outputs": [{ "name": "_daiPaid", "type": "uint256" }, { "name": "_wethBought", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [attodaiToSell], options.sender);
            return result;
        };
        this.paused_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "paused", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.withdrawPayments = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "withdrawPayments", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'withdrawPayments', options.sender);
            return;
        };
        this.withdrawPayments_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "withdrawPayments", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.ethPriceInUsd_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "ethPriceInUsd", "outputs": [{ "name": "_attousd", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.renounceOwnership = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'renounceOwnership', options.sender);
            return;
        };
        this.renounceOwnership_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.getBuyPriceAndAmount_ = async (payGem, buyGem, buyDesiredAmount, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "_payGem", "type": "address" }, { "name": "_buyGem", "type": "address" }, { "name": "_buyDesiredAmount", "type": "uint256" }], "name": "getBuyPriceAndAmount", "outputs": [{ "name": "_paidAmount", "type": "uint256" }, { "name": "_boughtAmount", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [payGem, buyGem, buyDesiredAmount], options.sender);
            return result;
        };
        this.openCdp = async (leverage, leverageSizeInAttoeth, allowedFeeInAttoeth, affiliateFeeInAttoeth, affiliateAddress, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_leverage", "type": "uint256" }, { "name": "_leverageSizeInAttoeth", "type": "uint256" }, { "name": "_allowedFeeInAttoeth", "type": "uint256" }, { "name": "_affiliateFeeInAttoeth", "type": "uint256" }, { "name": "_affiliateAddress", "type": "address" }], "name": "openCdp", "outputs": [{ "name": "_cdpId", "type": "bytes32" }], "payable": true, "stateMutability": "payable", "type": "function" };
            await this.remoteCall(abi, [leverage, leverageSizeInAttoeth, allowedFeeInAttoeth, affiliateFeeInAttoeth, affiliateAddress], 'openCdp', options.sender, options.attachedEth);
            return;
        };
        this.openCdp_ = async (leverage, leverageSizeInAttoeth, allowedFeeInAttoeth, affiliateFeeInAttoeth, affiliateAddress, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_leverage", "type": "uint256" }, { "name": "_leverageSizeInAttoeth", "type": "uint256" }, { "name": "_allowedFeeInAttoeth", "type": "uint256" }, { "name": "_affiliateFeeInAttoeth", "type": "uint256" }, { "name": "_affiliateAddress", "type": "address" }], "name": "openCdp", "outputs": [{ "name": "_cdpId", "type": "bytes32" }], "payable": true, "stateMutability": "payable", "type": "function" };
            const result = await this.localCall(abi, [leverage, leverageSizeInAttoeth, allowedFeeInAttoeth, affiliateFeeInAttoeth, affiliateAddress], options.sender, options.attachedEth);
            return result[0];
        };
        this.peth_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "peth", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.mkr_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "mkr", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.pause = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "pause", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'pause', options.sender);
            return;
        };
        this.pause_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "pause", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.owner_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.wethWithdraw = async (amount, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "amount", "type": "uint256" }], "name": "wethWithdraw", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [amount], 'wethWithdraw', options.sender);
            return;
        };
        this.wethWithdraw_ = async (amount, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "amount", "type": "uint256" }], "name": "wethWithdraw", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [amount], options.sender);
        };
        this.recordCdpOwnership = async (cdpId, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }], "name": "recordCdpOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cdpId], 'recordCdpOwnership', options.sender);
            return;
        };
        this.recordCdpOwnership_ = async (cdpId, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }], "name": "recordCdpOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [cdpId], options.sender);
        };
        this.oasis_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "oasis", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.returnCdp = async (cdpId, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }], "name": "returnCdp", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cdpId], 'returnCdp', options.sender);
            return;
        };
        this.returnCdp_ = async (cdpId, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "_cdpId", "type": "bytes32" }], "name": "returnCdp", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [cdpId], options.sender);
        };
        this.cdpLastOwner_ = async (arg0, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "", "type": "bytes32" }], "name": "cdpLastOwner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [arg0], options.sender);
            return result[0];
        };
        this.payments_ = async (arg0, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "", "type": "address" }], "name": "payments", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [arg0], options.sender);
            return result[0];
        };
        this.pendingOwner_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "pendingOwner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.cdpCount_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "cdpCount", "outputs": [{ "name": "_cdpCount", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.transferOwnership = async (newOwner, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender);
            return;
        };
        this.transferOwnership_ = async (newOwner, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [newOwner], options.sender);
        };
        this.dai_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "dai", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.providerFeePerEth_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "providerFeePerEth", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
    }
}
exports.LiquidLong = LiquidLong;
class Maker extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.join = async (wad, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "wad", "type": "uint256" }], "name": "join", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [wad], 'join', options.sender);
            return;
        };
        this.join_ = async (wad, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "wad", "type": "uint256" }], "name": "join", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [wad], options.sender);
        };
        this.skr_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "skr", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.gov_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "gov", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.ink = async (cup, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }], "name": "ink", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cup], 'ink', options.sender);
            return;
        };
        this.ink_ = async (cup, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }], "name": "ink", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [cup], options.sender);
            return result[0];
        };
        this.draw = async (cup, wad, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }, { "name": "wad", "type": "uint256" }], "name": "draw", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cup, wad], 'draw', options.sender);
            return;
        };
        this.draw_ = async (cup, wad, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }, { "name": "wad", "type": "uint256" }], "name": "draw", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [cup, wad], options.sender);
        };
        this.cupi_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "cupi", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.gap_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "gap", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.rap = async (cup, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }], "name": "rap", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cup], 'rap', options.sender);
            return;
        };
        this.rap_ = async (cup, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }], "name": "rap", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [cup], options.sender);
            return result[0];
        };
        this.wipe = async (cup, wad, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }, { "name": "wad", "type": "uint256" }], "name": "wipe", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cup, wad], 'wipe', options.sender);
            return;
        };
        this.wipe_ = async (cup, wad, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }, { "name": "wad", "type": "uint256" }], "name": "wipe", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [cup, wad], options.sender);
        };
        this.gem_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "gem", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.per_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "per", "outputs": [{ "name": "ray", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.sai_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "sai", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.lock = async (cup, wad, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }, { "name": "wad", "type": "uint256" }], "name": "lock", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cup, wad], 'lock', options.sender);
            return;
        };
        this.lock_ = async (cup, wad, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }, { "name": "wad", "type": "uint256" }], "name": "lock", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [cup, wad], options.sender);
        };
        this.give = async (cup, guy, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }, { "name": "guy", "type": "address" }], "name": "give", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cup, guy], 'give', options.sender);
            return;
        };
        this.give_ = async (cup, guy, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }, { "name": "guy", "type": "address" }], "name": "give", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [cup, guy], options.sender);
        };
        this.chi = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "chi", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'chi', options.sender);
            return;
        };
        this.chi_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "chi", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.pip_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "pip", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.lad_ = async (cup, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "cup", "type": "bytes32" }], "name": "lad", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [cup], options.sender);
            return result[0];
        };
        this.tab = async (cup, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }], "name": "tab", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [cup], 'tab', options.sender);
            return;
        };
        this.tab_ = async (cup, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "cup", "type": "bytes32" }], "name": "tab", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [cup], options.sender);
            return result[0];
        };
        this.open = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "open", "outputs": [{ "name": "cup", "type": "bytes32" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'open', options.sender);
            return;
        };
        this.open_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "open", "outputs": [{ "name": "cup", "type": "bytes32" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.cups_ = async (arg0, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "", "type": "bytes32" }], "name": "cups", "outputs": [{ "name": "lad", "type": "address" }, { "name": "ink", "type": "uint256" }, { "name": "art", "type": "uint256" }, { "name": "ire", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [arg0], options.sender);
            return result;
        };
    }
}
exports.Maker = Maker;
class Medianizer extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.read_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "read", "outputs": [{ "name": "", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
    }
}
exports.Medianizer = Medianizer;
class Mkr extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.approve = async (spender, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "spender", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [spender, value], 'approve', options.sender);
            return;
        };
        this.approve_ = async (spender, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "spender", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [spender, value], options.sender);
            return result[0];
        };
        this.totalSupply_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "totalSupply", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.transferFrom = async (from, to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender);
            return;
        };
        this.transferFrom_ = async (from, to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [from, to, value], options.sender);
            return result[0];
        };
        this.balanceOf_ = async (who, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "who", "type": "address" }], "name": "balanceOf", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [who], options.sender);
            return result[0];
        };
        this.transfer = async (to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [to, value], 'transfer', options.sender);
            return;
        };
        this.transfer_ = async (to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [to, value], options.sender);
            return result[0];
        };
        this.allowance_ = async (owner, spender, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "owner", "type": "address" }, { "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [owner, spender], options.sender);
            return result[0];
        };
    }
}
exports.Mkr = Mkr;
class Oasis extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.getBestOffer_ = async (sell_gem, buy_gem, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "sell_gem", "type": "address" }, { "name": "buy_gem", "type": "address" }], "name": "getBestOffer", "outputs": [{ "name": "offerId", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [sell_gem, buy_gem], options.sender);
            return result[0];
        };
        this.sellAllAmount = async (pay_gem, pay_amt, buy_gem, min_fill_amount, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "pay_gem", "type": "address" }, { "name": "pay_amt", "type": "uint256" }, { "name": "buy_gem", "type": "address" }, { "name": "min_fill_amount", "type": "uint256" }], "name": "sellAllAmount", "outputs": [{ "name": "fill_amt", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [pay_gem, pay_amt, buy_gem, min_fill_amount], 'sellAllAmount', options.sender);
            return;
        };
        this.sellAllAmount_ = async (pay_gem, pay_amt, buy_gem, min_fill_amount, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "pay_gem", "type": "address" }, { "name": "pay_amt", "type": "uint256" }, { "name": "buy_gem", "type": "address" }, { "name": "min_fill_amount", "type": "uint256" }], "name": "sellAllAmount", "outputs": [{ "name": "fill_amt", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [pay_gem, pay_amt, buy_gem, min_fill_amount], options.sender);
            return result[0];
        };
        this.getBuyAmount_ = async (tokenToBuy, tokenToPay, amountToPay, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "tokenToBuy", "type": "address" }, { "name": "tokenToPay", "type": "address" }, { "name": "amountToPay", "type": "uint256" }], "name": "getBuyAmount", "outputs": [{ "name": "amountBought", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [tokenToBuy, tokenToPay, amountToPay], options.sender);
            return result[0];
        };
        this.getOffer_ = async (id, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "id", "type": "uint256" }], "name": "getOffer", "outputs": [{ "name": "pay_amt", "type": "uint256" }, { "name": "pay_gem", "type": "address" }, { "name": "buy_amt", "type": "uint256" }, { "name": "buy_gem", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [id], options.sender);
            return result;
        };
        this.getWorseOffer_ = async (id, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "id", "type": "uint256" }], "name": "getWorseOffer", "outputs": [{ "name": "offerId", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [id], options.sender);
            return result[0];
        };
        this.getPayAmount_ = async (tokenToPay, tokenToBuy, amountToBuy, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "tokenToPay", "type": "address" }, { "name": "tokenToBuy", "type": "address" }, { "name": "amountToBuy", "type": "uint256" }], "name": "getPayAmount", "outputs": [{ "name": "amountPaid", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [tokenToPay, tokenToBuy, amountToBuy], options.sender);
            return result[0];
        };
    }
}
exports.Oasis = Oasis;
class Ownable extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.renounceOwnership = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'renounceOwnership', options.sender);
            return;
        };
        this.renounceOwnership_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.owner_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.transferOwnership = async (newOwner, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender);
            return;
        };
        this.transferOwnership_ = async (newOwner, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [newOwner], options.sender);
        };
    }
}
exports.Ownable = Ownable;
class Pausable extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.unpause = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "unpause", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'unpause', options.sender);
            return;
        };
        this.unpause_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "unpause", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.paused_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "paused", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.renounceOwnership = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'renounceOwnership', options.sender);
            return;
        };
        this.renounceOwnership_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.pause = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "pause", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'pause', options.sender);
            return;
        };
        this.pause_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "pause", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.owner_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.transferOwnership = async (newOwner, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender);
            return;
        };
        this.transferOwnership_ = async (newOwner, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [newOwner], options.sender);
        };
    }
}
exports.Pausable = Pausable;
class Peth extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.approve = async (spender, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "spender", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [spender, value], 'approve', options.sender);
            return;
        };
        this.approve_ = async (spender, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "spender", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [spender, value], options.sender);
            return result[0];
        };
        this.totalSupply_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "totalSupply", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.transferFrom = async (from, to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender);
            return;
        };
        this.transferFrom_ = async (from, to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [from, to, value], options.sender);
            return result[0];
        };
        this.balanceOf_ = async (who, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "who", "type": "address" }], "name": "balanceOf", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [who], options.sender);
            return result[0];
        };
        this.transfer = async (to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [to, value], 'transfer', options.sender);
            return;
        };
        this.transfer_ = async (to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [to, value], options.sender);
            return result[0];
        };
        this.allowance_ = async (owner, spender, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "owner", "type": "address" }, { "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [owner, spender], options.sender);
            return result[0];
        };
    }
}
exports.Peth = Peth;
class PullPayment extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.totalPayments_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "totalPayments", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.withdrawPayments = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "withdrawPayments", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [], 'withdrawPayments', options.sender);
            return;
        };
        this.withdrawPayments_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "withdrawPayments", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [], options.sender);
        };
        this.payments_ = async (arg0, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "", "type": "address" }], "name": "payments", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [arg0], options.sender);
            return result[0];
        };
    }
}
exports.PullPayment = PullPayment;
class Weth extends Contract {
    constructor(dependencies, address) {
        super(dependencies, address);
        this.approve = async (spender, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "spender", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [spender, value], 'approve', options.sender);
            return;
        };
        this.approve_ = async (spender, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "spender", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [spender, value], options.sender);
            return result[0];
        };
        this.totalSupply_ = async (options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [], "name": "totalSupply", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [], options.sender);
            return result[0];
        };
        this.transferFrom = async (from, to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender);
            return;
        };
        this.transferFrom_ = async (from, to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "from", "type": "address" }, { "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [from, to, value], options.sender);
            return result[0];
        };
        this.withdraw = async (wad, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "wad", "type": "uint256" }], "name": "withdraw", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [wad], 'withdraw', options.sender);
            return;
        };
        this.withdraw_ = async (wad, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "wad", "type": "uint256" }], "name": "withdraw", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.localCall(abi, [wad], options.sender);
        };
        this.balanceOf_ = async (who, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "who", "type": "address" }], "name": "balanceOf", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [who], options.sender);
            return result[0];
        };
        this.transfer = async (to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            await this.remoteCall(abi, [to, value], 'transfer', options.sender);
            return;
        };
        this.transfer_ = async (to, value, options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [{ "name": "to", "type": "address" }, { "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" };
            const result = await this.localCall(abi, [to, value], options.sender);
            return result[0];
        };
        this.deposit = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "deposit", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" };
            await this.remoteCall(abi, [], 'deposit', options.sender, options.attachedEth);
            return;
        };
        this.deposit_ = async (options) => {
            options = options || {};
            const abi = { "constant": false, "inputs": [], "name": "deposit", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" };
            await this.localCall(abi, [], options.sender, options.attachedEth);
        };
        this.allowance_ = async (owner, spender, options) => {
            options = options || {};
            const abi = { "constant": true, "inputs": [{ "name": "owner", "type": "address" }, { "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" };
            const result = await this.localCall(abi, [owner, spender], options.sender);
            return result[0];
        };
    }
}
exports.Weth = Weth;
//# sourceMappingURL=liquid-long.js.map