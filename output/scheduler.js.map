{"version":3,"file":"scheduler.js","sourceRoot":"","sources":["../source/scheduler.ts"],"names":[],"mappings":";;AAAA,MAAsB,SAAS;IAA/B;QACQ,UAAK,GAAG,CAAC,YAAoB,EAAiB,EAAE;YACtD,OAAO,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE;gBAClC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAA;YAC7C,CAAC,CAAC,CAAA;QACH,CAAC,CAAA;IAIF,CAAC;CAAA;AATD,8BASC;AAED,MAAa,gBAAiB,SAAQ,SAAS;IAA/C;;QACkB,qBAAgB,GAAG,IAAI,GAAG,EAAgB,CAAA;QACnD,YAAO,GAAG,KAAK,CAAA;QAEhB,aAAQ,GAAG,CAAC,YAAoB,EAAE,aAAyB,EAAgB,EAAE;YACnF,IAAI,eAA6B,CAAA;YACjC,eAAe,GAAG,UAAU,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,aAAa,EAAE,CAAA,CAAC,CAAC,EAAE,YAAY,CAAC,CAAA;YACpH,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;YAC1C,OAAO,eAAe,CAAA;QACvB,CAAC,CAAA;QAEM,WAAM,GAAG,CAAC,eAA6B,EAAQ,EAAE;YACvD,YAAY,CAAC,eAAe,CAAC,CAAA;YAC7B,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAA;QAC9C,CAAC,CAAA;QAEM,cAAS,GAAG,GAAS,EAAE;YAC7B,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAA;QAChF,CAAC,CAAA;IACF,CAAC;CAAA;AAnBD,4CAmBC","sourcesContent":["export abstract class Scheduler {\n\tpublic delay = (milliseconds: number): Promise<void> => {\n\t\treturn new Promise<void>(resolve => {\n\t\t\tthis.schedule(milliseconds, () => resolve())\n\t\t})\n\t}\n\tabstract schedule: (milliseconds: number, scheduledTask: () => void) => any\n\tabstract cancel: (scheduledTaskId: any) => void\n\tabstract cancelAll: () => void\n}\n\nexport class TimeoutScheduler extends Scheduler {\n\tprivate readonly scheduledTaskIds = new Set<NodeJS.Timer>()\n\tprivate stopped = false\n\n\tpublic schedule = (milliseconds: number, scheduledTask: () => void): NodeJS.Timer => {\n\t\tlet scheduledTaskId: NodeJS.Timer\n\t\tscheduledTaskId = setTimeout(() => { this.scheduledTaskIds.delete(scheduledTaskId); scheduledTask() }, milliseconds)\n\t\tthis.scheduledTaskIds.add(scheduledTaskId)\n\t\treturn scheduledTaskId\n\t}\n\n\tpublic cancel = (scheduledTaskId: NodeJS.Timer): void => {\n\t\tclearTimeout(scheduledTaskId)\n\t\tthis.scheduledTaskIds.delete(scheduledTaskId)\n\t}\n\n\tpublic cancelAll = (): void => {\n\t\tthis.scheduledTaskIds.forEach(scheduledTaskId => clearTimeout(scheduledTaskId))\n\t}\n}\n"]}