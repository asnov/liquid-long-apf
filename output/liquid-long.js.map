{"version":3,"file":"liquid-long.js","sourceRoot":"","sources":["../source/liquid-long.ts"],"names":[],"mappings":"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","sourcesContent":["import { LiquidLong as LiquidLongContract } from './generated/liquid-long'\nimport { LiquidLongDependenciesEthers, Provider, Signer } from './liquid-long-ethers-impl'\nimport { Scheduler } from './scheduler'\nimport { PolledValue } from './polled-value'\nimport { BigNumber, bigNumberify } from 'ethers/utils'\n\nexport class LiquidLong {\n\tprivate readonly contract: LiquidLongContract<BigNumber>\n\tprivate readonly ethPriceInUsd: PolledValue<number>\n\tprivate readonly providerFeeRate: PolledValue<number>\n\tpublic readonly awaitReady: Promise<void>\n\n\tpublic constructor(scheduler: Scheduler, provider: Provider, signer: Signer, liquidLongAddress: string, defaultEthPriceInUsd: number, defaultProviderFeeRate: number, ethPricePollingFrequency: number = 10000, providerFeePollingFrequency: number = 10000) {\n\t\tthis.contract = new LiquidLongContract(new LiquidLongDependenciesEthers(provider, signer), liquidLongAddress)\n\t\tthis.ethPriceInUsd = new PolledValue(scheduler, this.fetchEthPriceInUsd, ethPricePollingFrequency, defaultEthPriceInUsd)\n\t\tthis.providerFeeRate = new PolledValue(scheduler, this.fetchProviderFeeRate, providerFeePollingFrequency, defaultProviderFeeRate)\n\t\tthis.awaitReady = Promise.all([this.ethPriceInUsd.latest, this.providerFeeRate.latest]).then(() => {})\n\t}\n\n\tpublic shutdown = async (): Promise<void> => {\n\t\tawait Promise.all([\n\t\t\tthis.ethPriceInUsd.shutdown(),\n\t\t\tthis.providerFeeRate.shutdown(),\n\t\t])\n\t}\n\n\tpublic registerForEthPriceUpdated = (listener: (newEthPriceInUsd: number) => void): void => {\n\t\tthis.ethPriceInUsd.registerListener(listener)\n\t}\n\n\tpublic getEthPriceInUsd = async (): Promise<number> => {\n\t\treturn await this.ethPriceInUsd.cached\n\t}\n\n\tpublic getLiquidationPriceInUsd = async (leverageMultiplier: number): Promise<number> => {\n\t\tconst ethPrice = await this.ethPriceInUsd.cached\n\t\tconst liquidationAsPercentOfPrice =  1.5 - 1.5 / leverageMultiplier\n\t\treturn ethPrice * liquidationAsPercentOfPrice\n\t}\n\n\tpublic getFuturePriceInUsdForPercentChange = async (percentChangeFromCurrent: number, leverageMultiplier: number): Promise<number> => {\n\t\tconst ethPrice = await this.ethPriceInUsd.cached\n\t\treturn ethPrice * (1 + percentChangeFromCurrent / leverageMultiplier)\n\t}\n\n\tpublic getPercentageChangeForFuturePrice = async (futurePriceInUsd: number, leverageMultiplier: number): Promise<number> => {\n\t\tconst ethPrice = await this.ethPriceInUsd.cached\n\t\treturn leverageMultiplier * (futurePriceInUsd / ethPrice - 1)\n\t}\n\n\tpublic getPositionValueInUsdAtFuturePrice = async (futurePriceInUsd: number, leverageMultiplier: number, leverageSizeInEth: number): Promise<number> => {\n\t\tconst percentageChange = await this.getPercentageChangeForFuturePrice(futurePriceInUsd, leverageMultiplier)\n\t\tconst ethAtPrice = leverageSizeInEth + leverageSizeInEth * percentageChange\n\t\treturn ethAtPrice * await this.ethPriceInUsd.cached\n\t}\n\n\tpublic getChangeInPositionValueInUsdAtFuturePrice = async (futurePriceInUsd: number, leverageMultiplier: number, leverageSizeInEth: number): Promise<number> => {\n\t\tconst currentPositionValueInUsd = await this.getPositionValueInUsdAtFuturePrice(await this.ethPriceInUsd.cached, leverageMultiplier, leverageSizeInEth)\n\t\tconst futurePositionValueInUsd =  await this.getPositionValueInUsdAtFuturePrice(futurePriceInUsd, leverageMultiplier, leverageSizeInEth)\n\t\treturn futurePositionValueInUsd - currentPositionValueInUsd\n\t}\n\n\tpublic getFeeInEth = async (leverageMultiplier: number, leverageSizeInEth: number): Promise<number> => {\n\t\tconst providerFeeRate = await this.providerFeeRate.cached\n\t\tconst loanInEth = this.getLoanSizeInEth(leverageMultiplier, leverageSizeInEth)\n\t\tconst feeInEth = loanInEth * providerFeeRate\n\t\treturn feeInEth\n\t}\n\n\t// TODO verify this math with a run through of a liquidation\n\tpublic getLiquidationPenaltyPercent = (leverageMultiplier: number): number => {\n\t\tconst liquidationAsPercentOfPrice = 1.5 - 1.5 / leverageMultiplier\n\t\treturn leverageMultiplier * (liquidationAsPercentOfPrice * (1 - 0.13 / leverageMultiplier) - 1)\n\t}\n\n\tpublic getEstimatedCostsInEth = async (leverageMultiplier: number, leverageSizeInEth: number): Promise<{low: number, high: number}> => {\n\t\tconst daiPerEth = this.ethPriceInUsd.cached\n\t\tconst loanSizeInEth = this.getLoanSizeInEth(leverageMultiplier, leverageSizeInEth)\n\t\tconst daiToSell = loanSizeInEth * daiPerEth\n\t\tconst attodaiToSell = bigNumberify(Math.floor(daiToSell * 1e9)).mul(1e9)\n\t\tconst result = await this.contract.estimateDaiSaleProceeds_(attodaiToSell)\n\t\tconst daiSaleProceedsInEth = result._wethBought.div(1e9).toNumber() / 1e9\n\t\tconst estimatedCostInEth = loanSizeInEth - daiSaleProceedsInEth\n\t\tconst low = estimatedCostInEth\n\t\tconst high = (low > 0) ? low * 2 : 0\n\t\treturn { low, high }\n\t}\n\n\tpublic openPosition = async (leverageMultiplier: number, leverageSizeInEth: number, costLimitInEth: number, feeLimitInEth: number): Promise<void> => {\n\t\tconst leverageMultiplierInPercents = bigNumberify(Math.round(leverageMultiplier * 100))\n\t\tconst leverageSizeInAttoeth = bigNumberify(Math.floor(leverageSizeInEth * 1e9)).mul(1e9)\n\t\tconst allowedCostInAttoeth = bigNumberify(Math.floor(costLimitInEth * 1e9)).mul(1e9)\n\t\tconst allowedFeeInAttoeth = bigNumberify(Math.floor(feeLimitInEth * 1e9)).mul(1e9)\n\t\tconst affiliateFeeInAttoeth = bigNumberify(0)\n\t\tconst affiliateAddress = '0x0000000000000000000000000000000000000000'\n\t\tconst totalAttoeth = leverageSizeInAttoeth.add(allowedCostInAttoeth).add(allowedFeeInAttoeth).add(affiliateFeeInAttoeth)\n\t\tawait this.contract.openCdp(leverageMultiplierInPercents, leverageSizeInAttoeth, allowedFeeInAttoeth, affiliateFeeInAttoeth, affiliateAddress, { attachedEth: totalAttoeth })\n\t}\n\n\tpublic adminDepositEth = async (amount: number): Promise<void> => {\n\t\tawait this.contract.wethDeposit({ attachedEth: bigNumberify(amount).mul(1e18.toString()) })\n\t}\n\n\tpublic adminWithdrawEth = async (amount: number): Promise<void> => {\n\t\tawait this.contract.wethWithdraw(bigNumberify(amount).mul(1e18.toString()))\n\t}\n\n\tprivate fetchEthPriceInUsd = async (): Promise<number> => {\n\t\tconst attousd = await this.contract.ethPriceInUsd_()\n\t\treturn attousd.div(1e9).toNumber() / 1e9\n\t}\n\n\tprivate fetchProviderFeeRate = async (): Promise<number> => {\n\t\tconst providerFeeAttoethPerEth = await this.contract.providerFeePerEth_()\n\t\treturn providerFeeAttoethPerEth.div(1e9).toNumber() / 1e9\n\t}\n\n\tprivate getLoanSizeInEth = (leverageMultiplier: number, leverageSizeInEth: number): number => {\n\t\tconst ethLockedInCdp = leverageSizeInEth * leverageMultiplier\n\t\tconst loanInEth = ethLockedInCdp - leverageSizeInEth\n\t\treturn loanInEth\n\t}\n}\n\n// https://github.com/nodejs/promise-use-cases/issues/27 current behavior of node is dumb, this fixes that\n// process.on('unhandledRejection', e => { /* swallow error */ })\n"]}